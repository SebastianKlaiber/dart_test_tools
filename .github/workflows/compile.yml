on:
  workflow_call:
    inputs:
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      repository:
        type: string
        required: false
        description: The repository to check out. Passed as "repository" to "actions/checkout".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      hosts:
        type: string
        required: false
        default: '["ubuntu-latest","windows-latest","macos-latest"]'
        description: |
          The host operating systems to create binaries for.
          By default the latest versions of linux, windows and macos are used.
          Expects a JSON array of GitHub Action host OS specifies.

          Example:
          ["ubuntu-latest", "windows-latest", "macos-latest"]
      targets:
        type: string
        required: true
        description: |
          The names of the targets to be compiled. Must be JSON array of strings, each
          string beeing the name of a file in the bin/ folder, without the dart extension.

          Example:
          ["my-app"]
      releaseRef:
        type: string
        required: false
        default: refs/heads/main
        description: The git ref that is allowed to publish releases.
      tagPrefix:
        type: string
        required: false
        default: v
        description: The prefix of git tags. The tag is the prefix, followed by the package version.
jobs:
  compile:
    name: Create compiled artifacts
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(format('{{"host":{0},"target":{1}}}', inputs.hosts, inputs.targets)) }}
    runs-on: ${{ matrix.host }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install yq (Windows)
        if: runner.os == 'Windows'
        run: choco install yq
      - name: Install yq (macOS)
        if: runner.os == 'macOS'
        run: brew install yq
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Remove dependency overrides
        run: yq e -i "del(.dependency_overrides)" pubspec.yaml
        working-directory: ${{ inputs.workingDirectory }}
      - name: Restore dart packages
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner
        run: dart run build_runner build
        working-directory: ${{ inputs.workingDirectory }}
      - name: Compile ${{ matrix.target }}
        run: dart compile exe 'bin/${{ matrix.target }}.dart'
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload compiled ${{ matrix.target }}.exe
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-${{ matrix.host }}.exe
          path: ${{ inputs.workingDirectory }}/bin/${{ matrix.target }}.exe
  release:
    name: Create release if needed
    needs:
      - compile
    if: github.ref == inputs.releaseRef
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - id: version
        name: Check if a release should be created
        run: |
          set -e
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          tag_exists=$(git tag -l "${{ inputs.tagPrefix }}$package_version")

          if [[ -z "$tag_exists" ]]; then
            echo Release does not exist yet - creating release
            echo "::set-output name=update::true"
          else
            echo Release already exists - skipping creation
            echo "::set-output name=update::false"
          fi
      - name: Download all binary artifacts
        if: steps.version.outputs.update == 'true'
        uses: actions/download-artifact@v2
        with:
          path: artifacts
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "::set-output name=tag_name::$tag_name"

          release_name="Release of package $package_name - Version $package_version"
          echo "::set-output name=release_name::$release_name"

          version_changelog_file=$(mktemp)
          echo "## Changelog" > $version_changelog_file
          cat CHANGELOG.md | sed '/^## \['$package_version'\].*$/,/^## \[/!d;//d' >> $version_changelog_file
          echo "" > $version_changelog_file
          echo "::set-output name=body_path::$version_changelog_file"
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}
          files: artifacts/**/*.exe
