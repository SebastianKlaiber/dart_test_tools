on:
  workflow_call:
    inputs:
      hosts:
        type: string
        required: false
        default: '["ubuntu-latest", "windows-latest", "macos-latest"]'
      targets:
        type: string
        required: true

jobs:
  compile:
    name: Create compiled artifacts
    strategy:
      fail-fast: false
      matrix: >-
        ${{ fromJson(format('{
        "host": {0},
        "target": {1}
        }', inputs.hosts, inputs.targets)) }}

    runs-on: ${{ matrix.host }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install yq (Windows)
        if: runner.os == 'Windows'
        run: choco install yq
      - name: Install yq (macOS)
        if: runner.os == 'macOS'
        run: brew install yq
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Remove dependency overrides
        run: yq e -i "del(.dependency_overrides)" pubspec.yaml
        working-directory: ${{ inputs.workingDirectory }}
      - name: Restore dart packages
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner
        run: dart run build_runner build
        working-directory: ${{ inputs.workingDirectory }}
      - name: Compile ${{ matrix.target }}
        run: dart compile exe 'bin/${{ matrix.target }}.dart'
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload compiled artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target }}-${{ matrix.host }}.exe
          path: ${{ inputs.workingDirectory }}/bin/${{ matrix.target }}.exe

  release:
    name: Create release if needed
    needs:
      - compile
    if: github.ref == inputs.releaseRef
    outputs:
      update: ${{ steps.version.outputs.update }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - id: version
        name: Check if package should be published
        run: |
          TODO use git tags
        working-directory: ${{ inputs.workingDirectory }}
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "::set-output name=tag_name::$tag_name"

          release_name="Release of package $package_name - Version $package_version"
          echo "::set-output name=release_name::$release_name"

          version_changelog_file=$(mktemp)
          echo "## Changelog" > $version_changelog_file
          cat CHANGELOG.md | sed '/^## \['$package_version'\].*$/,/^## \[/!d;//d' >> $version_changelog_file
          echo "" > $version_changelog_file
          echo "The package and it's documentation are available at [pub.dev](https://pub.dev/packages/$package_name/versions/$package_version)." > $version_changelog_file
          echo "::set-output name=body_path::$version_changelog_file"
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          release_name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}
  publish:
    name: Publish to pub.dev
    needs:
      - release
    if: inputs.publish && needs.release.outputs.update == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: "!inputs.flutter"
        uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install Flutter-SDK (${{ inputs.flutterSdkChannel }})
        if: inputs.flutter
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ inputs.flutterSdkChannel }}
      - id: tools
        name: Prepare build tools
        run: |
          if ${{ inputs.flutter }}; then
            echo "::set-output name=pub::flutter pub"
            echo "::set-output name=pubRun::flutter pub run"
          else
            echo "::set-output name=pub::dart pub"
            echo "::set-output name=pubRun::dart run"
          fi
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Remove dependency overrides
        run: yq e -i "del(.dependency_overrides)" pubspec.yaml
        working-directory: ${{ inputs.workingDirectory }}
      - name: Restore dart packages
        run: ${{ steps.tools.outputs.pub }} get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner
        run: ${{ steps.tools.outputs.pubRun }} build_runner build
        working-directory: ${{ inputs.workingDirectory }}
      - name: Prepare pub.dev credentials
        run: |
          set -e
          cache_dir="${PUB_CACHE:-~/.pub-cache}"
          mkdir -p "$cache_dir"
          echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > "$cache_dir/credentials.json"
      - name: Remove files to not be published
        if: inputs.publishExclude != ''
        run: |
          set -e
          echo '${{ inputs.publishExclude }}' | jq -cr '.[]' | while read exclude; do
            if [ -e "$exclude" ]; then
              git rm "$exclude"
            fi
          done
        working-directory: ${{ inputs.workingDirectory }}
        shell: bash
      - name: Publish package
        run: ${{ steps.tools.outputs.pub }} publish --force
        working-directory: ${{ inputs.workingDirectory }}
      - name: Clean up credentials
        if: always()
        run: shred -fzvu "${PUB_CACHE:-~/.pub-cache}/credentials.json"
