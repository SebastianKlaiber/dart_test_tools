on:
  workflow_call:
    inputs:
      # checkout and build paths
      repository:
        type: string
        required: false
        description: The repository to check out. Passed as "repository" to "actions/checkout"
      workingDirectory:
        type: string
        required: false
        default: "."
        description: The root directory of the dart package to build and test
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false)
      # static analysis
      publishExclude:
        type: string
        required: false
        description: Specify a list of colon separated paths to be excluded from publishing
      # unit tests & coverage
      unitTestPaths:
        type: string
        required: false
        description: >-
          Specifiy directories or paths of unit tests to run.
          By default, all test discoverable by dart test are run
      minCoverage:
        type: number
        required: false
        default: 95
        description: >-
          Minimal coverage (in percent) required for the CI to succeed.
          Passed as "min_coverage" to "VeryGoodOpenSource/very_good_coverage"
      coverageExclude:
        type: string
        required: false
        description: >-
          Files to exclude from test coverage.
          Passed as "exclude" to "VeryGoodOpenSource/very_good_coverage"
      # integration tests
      integrationTestPaths:
        type: string
        required: false
        description: >-
          Specifiy directories or paths of integration tests to run.
          By default, no integration test are run
      integrationTestSetup:
        type: string
        required: false
        description: |
          A JSON-Matrix with extra setup steps for each platform.
          contains key-value pairs for each platform with a command to be invoked.

          Example:
          {
            "linux": "dart run tools/install-deps.dart",
            "web": "./setup-web.sh"
          }
      # general config
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart"

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
      - uses: dart-lang/setup-dart@v1.3
        name: Install dart SDK (${{ inputs.dartSdkVersion }})
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - uses: actions/checkout@v2
        name: Checkout repository ${{ inputs.repository }}
        with:
          repository: ${{ inputs.repository }}
      - run: dart pub get
        name: Restore dart packages
        working-directory: ${{ inputs.workingDirectory }}
      - run: dart run build_runner build
        name: Create build files
        if: inputs.buildRunner
        working-directory: ${{ inputs.workingDirectory }}
      - run: dart analyze --fatal-infos
        name: Static analysis
        working-directory: ${{ inputs.workingDirectory }}
      - run: dart format -onone --set-exit-if-changed .
        name: Validate correct formatting
        working-directory: ${{ inputs.workingDirectory }}
      - run: |
          set -e
          if [[ ! -z "${{ inputs.publishExclude }}" ]]; then
            IFS=':'
            for path in "${{ inputs.publishExclude }}"; do
              git rm "$path"
            done
          fi
          exec dart pub publish --dry-run
        name: Test publishing configuration
        working-directory: ${{ inputs.workingDirectory }}

  unit_tests:
    name: Unit tests
    needs:
      - analyze
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - windows
          - macos
          - web

        include:
          - platform: linux
            os: ubuntu-latest
          - platform: windows
            os: windows-latest
          - platform: macos
            os: macos-latest
          - platform: web
            os: ubuntu-latest
            dartTestArgs: -p chrome

    runs-on: ${{ matrix.os }}
    steps:
      - uses: dart-lang/setup-dart@v1.3
        name: Install dart SDK (${{ inputs.dartSdkVersion }})
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - uses: actions/checkout@v2
        name: Checkout repository ${{ inputs.repository }}
        with:
          repository: ${{ inputs.repository }}
      - run: dart pub get
        name: Restore dart packages
        working-directory: ${{ inputs.workingDirectory }}
      - run: dart run build_runner build
        name: Create build files
        if: inputs.buildRunner
        working-directory: ${{ inputs.workingDirectory }}

      - run: dart test ${{ matrix.dartTestArgs }} --coverage=coverage ${{ inputs.unitTestPaths }}
        name: Run unit tests
        working-directory: ${{ inputs.workingDirectory }}

      - run: >-
          dart run coverage:format_coverage
          --lcov
          --check-ignore
          --in=coverage
          --out=coverage/lcov.info
          --packages=.packages
          --report-on=lib
        name: Transform coverage files
        working-directory: ${{ inputs.workingDirectory }}
      - uses: VeryGoodOpenSource/very_good_coverage@v1.1.1
        name: Validate coverage is at least ${{ inputs.minCoverage }}%
        with:
          path: ${{ inputs.workingDirectory }}/coverage/lcov.info
          min_coverage: ${{ inputs.minCoverage }}
          exclude: ${{ inputs.coverageExclude }}

  integration_tests:
    name: Integration tests
    if: "'${{ inputs.integrationTestPaths }}' != ''"
    needs:
      - analyze
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - windows
          - macos
          - web

        include:
          - platform: linux
            os: ubuntu-latest
          - platform: windows
            os: windows-latest
          - platform: macos
            os: macos-latest
          - platform: web
            os: ubuntu-latest
            dartTestArgs: -p chrome

    runs-on: ${{ matrix.os }}
    steps:
      - uses: dart-lang/setup-dart@v1.3
        name: Install dart SDK (${{ inputs.dartSdkVersion }})
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - uses: actions/checkout@v2
        name: Checkout repository ${{ inputs.repository }}
        with:
          repository: ${{ inputs.repository }}
      - run: dart pub get
        name: Restore dart packages
        working-directory: ${{ inputs.workingDirectory }}
      - run: dart run build_runner build
        name: Create build files
        if: inputs.buildRunner
        working-directory: ${{ inputs.workingDirectory }}

      - run: ${{ fromJSON(inputs.integrationTestSetup)[matrix.platform] }}
        name: Run platform test setup
        if: contains(fromJSON(inputs.integrationTestSetup), matrix.platform)

      - run: dart test ${{ matrix.dartTestArgs }} ${{ inputs.integrationTestPaths }}
        name: Run integration tests
        working-directory: ${{ inputs.workingDirectory }}
