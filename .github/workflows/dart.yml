on:
  workflow_call:
    inputs:
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart".
      repository:
        type: string
        required: false
        description: The repository to check out. Passed as "repository" to "actions/checkout".
      workingDirectory:
        type: string
        required: false
        default: .
        description: The root directory of the dart package to build and test.
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false).
      analyzeImage:
        type: string
        required: false
        default: ubuntu-latest
        description: The Runner-Image to use for the analyze step. Uses ubuntu-latest by default.
      publishExclude:
        type: string
        required: false
        description: Specify a list of colon separated paths to be excluded from publishing.
      unitTestPaths:
        type: string
        required: false
        default: test
        description: Specifiy directories or paths of unit tests to run. By default, all test in the test directory are run.
      minCoverage:
        type: number
        required: false
        default: 95
        description: Minimal coverage (in percent) required for the CI to succeed. Passed as "min_coverage" to "VeryGoodOpenSource/very_good_coverage".
      platforms:
        type: string
        required: false
        default: '["linux","windows","macos","web"]'
        description: |
          A JSON-Formatted list of platforms that unit and integration tests should be run on.
          By default, all platforms are active. The available platforms are:
          - linux
          - windows
          - macos
          - web
      coverageExclude:
        type: string
        required: false
        description: Files to exclude from test coverage. Passed as command line arguments to a bash script. Excludes should be properly escaped, e.g. 'config.dart "**/*.g.dart"'.
      integrationTestPaths:
        type: string
        required: false
        description: Specifiy directories or paths of integration tests to run. By default, no integration test are run.
      integrationTestSetup:
        type: string
        required: false
        description: |
          A JSON-Matrix with extra setup steps for each platform.
          contains key-value pairs for each platform with a command to be invoked.
          The possible keys are the same as the platforms defined in 'platforms'.

          Example:
          {
            "linux": "dart run tools/install-deps.dart",
            "web": "./setup-web.sh"
          }
jobs:
  analyze:
    name: Analyze
    runs-on: ${{ inputs.analyzeImage }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install yq (Windows)
        if: runner.os == 'Windows'
        run: choco install yq
      - name: Install yq (macOS)
        if: runner.os == 'macOS'
        run: brew install yq
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Remove dependency overrides
        run: yq e -i "del(.dependency_overrides)" pubspec.yaml
        working-directory: ${{ inputs.workingDirectory }}
      - name: Restore dart packages
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner
        run: dart run build_runner build
        working-directory: ${{ inputs.workingDirectory }}
      - name: Static analysis
        run: dart analyze --fatal-infos
        working-directory: ${{ inputs.workingDirectory }}
      - name: Validate correct formatting
        run: dart format -onone --set-exit-if-changed .
        working-directory: ${{ inputs.workingDirectory }}
      - name: Remove files to not be published
        if: inputs.publishExclude != ''
        run: |
          set -e
          IFS=':'
          for path in "${{ inputs.publishExclude }}"; do
            if [ -e "$path" ]; then
              git rm "$path"
            fi
          done
        working-directory: ${{ inputs.workingDirectory }}
      - name: Test publishing configuration
        run: dart pub publish --dry-run
        working-directory: ${{ inputs.workingDirectory }}
  unit_tests:
    name: Unit tests
    needs:
      - analyze
    if: inputs.unitTestPaths != ''
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - windows
          - macos
          - web
        include:
          - platform: linux
            os: ubuntu-latest
            lcovCleanCommand: sed -i "s#SF:$PWD/#SF:#g" coverage/lcov.info
          - platform: windows
            os: windows-latest
            lcovCleanCommand: (Get-Content coverage\lcov.info).replace("SF:$PWD\", "SF:").replace("\", "/") | Set-Content coverage\lcov.info
          - platform: macos
            os: macos-latest
            lcovCleanCommand: sed -i "" "s#SF:$PWD/#SF:#g" coverage/lcov.info
          - platform: web
            os: ubuntu-latest
            lcovCleanCommand: sed -i "s#SF:$PWD/#SF:#g" coverage/lcov.info
            dartTestArgs: -p chrome
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install yq (Windows)
        if: runner.os == 'Windows' && contains(fromJSON(inputs.platforms), matrix.platform)
        run: choco install yq
      - name: Install yq (macOS)
        if: runner.os == 'macOS' && contains(fromJSON(inputs.platforms), matrix.platform)
        run: brew install yq
      - name: Checkout repository ${{ inputs.repository }}
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Remove dependency overrides
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: yq e -i "del(.dependency_overrides)" pubspec.yaml
        working-directory: ${{ inputs.workingDirectory }}
      - name: Restore dart packages
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner && contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart run build_runner build
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run unit tests
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart test ${{ matrix.dartTestArgs }} --coverage=coverage ${{ inputs.unitTestPaths }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Convert coverage data to lcov format
        if: inputs.minCoverage > 0 && contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart run coverage:format_coverage --lcov --check-ignore --in=coverage --out=coverage/lcov.info --packages=.packages --report-on=lib
        working-directory: ${{ inputs.workingDirectory }}
      - name: Normalize coverage paths
        if: inputs.minCoverage > 0 && contains(fromJSON(inputs.platforms), matrix.platform)
        run: ${{ matrix.lcovCleanCommand }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload coverage data
        if: inputs.minCoverage > 0 && contains(fromJSON(inputs.platforms), matrix.platform)
        uses: actions/upload-artifact@v2
        with:
          name: coverage-info-${{ matrix.platform }}
          path: ${{ inputs.workingDirectory }}/coverage/lcov.info
  coverage:
    name: Validate coverage
    needs:
      - unit_tests
    if: inputs.minCoverage > 0 && inputs.unitTestPaths != ''
    runs-on: ubuntu-latest
    steps:
      - name: Install coverage tools
        run: sudo apt-get -qq install lcov dos2unix
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Download linux coverage data
        if: contains(fromJSON(inputs.platforms), 'linux')
        uses: actions/download-artifact@v2
        with:
          name: coverage-info-linux
          path: ${{ inputs.workingDirectory }}/coverage/linux
      - name: Download windows coverage data
        if: contains(fromJSON(inputs.platforms), 'windows')
        uses: actions/download-artifact@v2
        with:
          name: coverage-info-windows
          path: ${{ inputs.workingDirectory }}/coverage/windows
      - name: Download macos coverage data
        if: contains(fromJSON(inputs.platforms), 'macos')
        uses: actions/download-artifact@v2
        with:
          name: coverage-info-macos
          path: ${{ inputs.workingDirectory }}/coverage/macos
      - name: Download web coverage data
        if: contains(fromJSON(inputs.platforms), 'web')
        uses: actions/download-artifact@v2
        with:
          name: coverage-info-web
          path: ${{ inputs.workingDirectory }}/coverage/web
      - name: Merge coverage data
        run: |
          set -e
          LCOV_ARGS=""
          for dir in $(ls coverage); do
            dos2unix coverage/$dir/lcov.info
            LCOV_ARGS="$LCOV_ARGS --add-tracefile coverage/$dir/lcov.info"
          done
          lcov $LCOV_ARGS --output-file coverage/combined.info
        working-directory: ${{ inputs.workingDirectory }}
      - name: Remove excluded files from coverage data
        run: lcov --remove coverage/combined.info --output-file coverage/cleaned.info ${{ inputs.coverageExclude }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Generate coverage report
        run: genhtml --no-function-coverage -o coverage/html coverage/cleaned.info
        working-directory: ${{ inputs.workingDirectory }}
      - name: Upload coverage HTML report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-html
          path: ${{ inputs.workingDirectory }}/coverage/html
      - name: Validate coverage is at least ${{ inputs.minCoverage }}%
        uses: VeryGoodOpenSource/very_good_coverage@v1.1.1
        with:
          path: ${{ inputs.workingDirectory }}/coverage/cleaned.info
          min_coverage: ${{ inputs.minCoverage }}
  integration_tests:
    name: Integration tests
    needs:
      - analyze
    if: inputs.integrationTestPaths != ''
    strategy:
      fail-fast: false
      matrix:
        platform:
          - linux
          - windows
          - macos
          - web
        include:
          - platform: linux
            os: ubuntu-latest
          - platform: windows
            os: windows-latest
          - platform: macos
            os: macos-latest
          - platform: web
            os: ubuntu-latest
            dartTestArgs: -p chrome
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install Dart-SDK (${{ inputs.dartSdkVersion }})
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install yq (Windows)
        if: runner.os == 'Windows' && contains(fromJSON(inputs.platforms), matrix.platform)
        run: choco install yq
      - name: Install yq (macOS)
        if: runner.os == 'macOS' && contains(fromJSON(inputs.platforms), matrix.platform)
        run: brew install yq
      - name: Checkout repository ${{ inputs.repository }}
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Remove dependency overrides
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: yq e -i "del(.dependency_overrides)" pubspec.yaml
        working-directory: ${{ inputs.workingDirectory }}
      - name: Restore dart packages
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart pub get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner && contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart run build_runner build
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run platform test setup
        if: fromJSON(inputs.integrationTestSetup)[matrix.platform] != '' && contains(fromJSON(inputs.platforms), matrix.platform)
        run: ${{ fromJSON(inputs.integrationTestSetup)[matrix.platform] }}
        working-directory: ${{ inputs.workingDirectory }}
      - name: Run integration tests
        if: contains(fromJSON(inputs.platforms), matrix.platform)
        run: dart test ${{ matrix.dartTestArgs }} ${{ inputs.integrationTestPaths }}
        working-directory: ${{ inputs.workingDirectory }}
