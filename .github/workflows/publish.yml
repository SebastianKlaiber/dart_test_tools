on:
  workflow_call:
    inputs:
      # checkout and build paths
      repository:
        type: string
        required: false
        description: The repository to check out. Passed as "repository" to "actions/checkout"
      workingDirectory:
        type: string
        required: false
        default: "."
        description: The root directory of the dart package to build and test
      releaseRef:
        type: string
        required: false
        default: "refs/heads/main"
        description: The gif ref that is allowed to publish releases
      buildRunner:
        type: boolean
        required: false
        default: false
        description: Specify whether build_runner is used in the project (defaults to false)
      # release config
      tagPrefix:
        type: string
        required: false
        default: v
        description: The prefix of git tags. The tag is the prefix, followed by the package version
      # publishing config
      publish:
        type: boolean
        required: false
        default: true
        description: >-
          Publish to pub.dev, if a new release was created. Enabled by default.
          Requires the PUB_DEV_CREDENTIALS secret to be set
      publishExclude:
        type: string
        required: false
        description: Specify a list of colon separated paths to be excluded from publishing
      # general config
      flutter:
        type: boolean
        required: false
        default: false
        description: Specifies, whether the package is a dart or a flutter package.
      dartSdkVersion:
        type: string
        required: false
        default: stable
        description: The Dart-SDK version. Passed as "sdk" to "dart-lang/setup-dart"
      flutterSdkChannel:
        type: string
        required: false
        default: stable
        description: The Flutter-SDK channel. Passed as "channel" to "subosito/flutter-action"
    secrets:
      PUB_DEV_CREDENTIALS:
        required: false
        description: The JSON-encoded credentials to log into pub.dev

jobs:
  release:
    name: "Create release if needed"
    runs-on: ubuntu-latest
    if: github.ref == inputs.releaseRef
    outputs:
      update: ${{ steps.version.outputs.update }}
    steps:
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - id: version
        name: Check if package should be published
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)
          version_exists_query=".versions | .[] | select(.version == \"$package_version\") | .version"

          pub_info_file=$(mktemp)
          curl -sSLo $pub_info_file \
            -H "Accept: application/vnd.pub.v2+json" \
            -H "Accept-Encoding: identity" \
            "https://pub.dev/api/packages/$package_name"

          if cat $pub_info_file | jq -e "$version_exists_query" > /dev/null; then
            echo "::set-output name=update::false"
          else
            echo "::set-output name=update::true"
          fi
        working-directory: ${{ inputs.workingDirectory }}
      - id: release_content
        name: Generate release content
        if: steps.version.outputs.update == 'true'
        run: |
          set -e
          package_name=$(cat pubspec.yaml | yq e ".name" -)
          package_version=$(cat pubspec.yaml | yq e ".version" -)

          tag_name="${{ inputs.tagPrefix }}$package_version"
          echo "::set-output name=tag_name::$tag_name"

          release_name="Release of package $package_name - version $package_version"
          echo "::set-output name=release_name::$release_name"

          version_changelog_file=$(mktemp)
          echo "## Changelog" > $version_changelog_file
          cat CHANGELOG.md | sed '/^## \['$package_version'\].*$/,/^## \[/!d;//d' >> $version_changelog_file
          echo "::set-output name=body_path::$version_changelog_file"
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create Release
        if: steps.version.outputs.update == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ steps.release_content.outputs.tag_name }}
          release_name: ${{ steps.release_content.outputs.release_name }}
          body_path: ${{ steps.release_content.outputs.body_path }}

  publish:
    name: Publish to pub.dev
    runs-on: ubuntu-latest
    needs:
      - release
    if: inputs.publish && needs.release.outputs.update == 'true'
    env:
      PUB_TOOL: "${{ inputs.flutter ? 'flutter pub' : 'dart pub' }}"
      BUILD_TOOL: "${{ inputs.flutter ? 'flutter pub run' : 'dart run' }}"
    steps:
      - name: Install dart SDK (${{ inputs.dartSdkVersion }})
        if: "!inputs.flutter"
        uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ inputs.dartSdkVersion }}
      - name: Install flutter SDK (${{ inputs.flutterSdkChannel }})
        if: inputs.flutter
        uses: subosito/flutter-action@v1
        with:
          channel: ${{ inputs.flutterSdkChannel }}
      - name: Checkout repository ${{ inputs.repository }}
        uses: actions/checkout@v2
        with:
          repository: ${{ inputs.repository }}
      - name: Restore dart packages
        run: ${{ env.PUB_TOOL }} get
        working-directory: ${{ inputs.workingDirectory }}
      - name: Create build files
        if: inputs.buildRunner
        run: ${{ env.BUILD_TOOL }} build_runner build
        working-directory: ${{ inputs.workingDirectory }}
      - name: Prepare pub.dev credentials
        run: |
          set -e
          cache_dir="${PUB_CACHE:-~/.pub-cache}"
          mkdir -p "$cache_dir"
          echo '${{ secrets.PUB_DEV_CREDENTIALS }}' > "$cache_dir/credentials.json"
      - name: Publish package
        run: |
          set -e
          if [[ ! -z "${{ inputs.publishExclude }}" ]]; then
            IFS=':'
            for path in "${{ inputs.publishExclude }}"; do
              git rm "$path"
            done
          fi
          exec ${{ env.PUB_TOOL }} publish --force
        working-directory: ${{ inputs.workingDirectory }}
      - name: Clean up credentials
        if: always()
        run: shred -fzvu "${PUB_CACHE:-~/.pub-cache}/credentials.json"
